const sinais = Array.from(uniqueMatchesMap.values());

// ðŸ”’ Caminho para armazenar os sinais jÃ¡ enviados
const enviadosPath = "./sinais_enviados.json";

// ðŸ”„ Carrega os sinais enviados anteriormente
let sinaisEnviados = [];
if (fs.existsSync(enviadosPath)) {
  const dados = fs.readFileSync(enviadosPath, "utf-8");
  sinaisEnviados = JSON.parse(dados);
}

// ðŸ”‘ Gera chave Ãºnica para cada sinal
const gerarChaveUnica = (sinal) =>
  `${sinal.times}-${sinal.hMin}-${sinal.league}`;

// ðŸ§  Set com as chaves jÃ¡ enviadas
const chavesEnviadas = new Set(sinaisEnviados.map(gerarChaveUnica));

// ðŸ†• Filtra somente os sinais novos que ainda nÃ£o foram enviados
const novosSinais = sinais.filter(
  (sinal) => !chavesEnviadas.has(gerarChaveUnica(sinal))
);

// ðŸ’¾ Atualiza os arquivos
if (novosSinais.length > 0) {
  console.log("ðŸŽ¯ Novos sinais Ãºnicos encontrados:", novosSinais);

  // Salva sinais atuais no sinais.json
  fs.writeFileSync("./sinais.json", JSON.stringify(novosSinais, null, 2));

  // Atualiza lista de todos jÃ¡ enviados
  const atualizados = [...sinaisEnviados, ...novosSinais];
  fs.writeFileSync(enviadosPath, JSON.stringify(atualizados, null, 2));

  console.log("ðŸ’¾ Arquivo sinais_enviados.json atualizado.");
} else {
  console.log("âœ… Nenhum novo sinal para enviar.");
}
